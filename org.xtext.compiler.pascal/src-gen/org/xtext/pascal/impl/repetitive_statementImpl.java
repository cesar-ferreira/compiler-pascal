/**
 * generated by Xtext 2.15.0
 */
package org.xtext.pascal.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.pascal.PascalPackage;
import org.xtext.pascal.repeat_statement;
import org.xtext.pascal.repetitive_statement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>repetitive statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.xtext.pascal.impl.repetitive_statementImpl#getRepeatStmt <em>Repeat Stmt</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class repetitive_statementImpl extends MinimalEObjectImpl.Container implements repetitive_statement
{
  /**
   * The cached value of the '{@link #getRepeatStmt() <em>Repeat Stmt</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRepeatStmt()
   * @generated
   * @ordered
   */
  protected repeat_statement repeatStmt;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected repetitive_statementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PascalPackage.Literals.REPETITIVE_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public repeat_statement getRepeatStmt()
  {
    return repeatStmt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRepeatStmt(repeat_statement newRepeatStmt, NotificationChain msgs)
  {
    repeat_statement oldRepeatStmt = repeatStmt;
    repeatStmt = newRepeatStmt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PascalPackage.REPETITIVE_STATEMENT__REPEAT_STMT, oldRepeatStmt, newRepeatStmt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRepeatStmt(repeat_statement newRepeatStmt)
  {
    if (newRepeatStmt != repeatStmt)
    {
      NotificationChain msgs = null;
      if (repeatStmt != null)
        msgs = ((InternalEObject)repeatStmt).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PascalPackage.REPETITIVE_STATEMENT__REPEAT_STMT, null, msgs);
      if (newRepeatStmt != null)
        msgs = ((InternalEObject)newRepeatStmt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PascalPackage.REPETITIVE_STATEMENT__REPEAT_STMT, null, msgs);
      msgs = basicSetRepeatStmt(newRepeatStmt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PascalPackage.REPETITIVE_STATEMENT__REPEAT_STMT, newRepeatStmt, newRepeatStmt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PascalPackage.REPETITIVE_STATEMENT__REPEAT_STMT:
        return basicSetRepeatStmt(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PascalPackage.REPETITIVE_STATEMENT__REPEAT_STMT:
        return getRepeatStmt();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PascalPackage.REPETITIVE_STATEMENT__REPEAT_STMT:
        setRepeatStmt((repeat_statement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.REPETITIVE_STATEMENT__REPEAT_STMT:
        setRepeatStmt((repeat_statement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PascalPackage.REPETITIVE_STATEMENT__REPEAT_STMT:
        return repeatStmt != null;
    }
    return super.eIsSet(featureID);
  }

} //repetitive_statementImpl
